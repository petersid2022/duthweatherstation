package web

templ Chart() {
	@Base() {
		<nav id="navbar" class="sticky top-0 z-50 flex flex-col sm:flex-row justify-between items-center bg-sky-600 text-white px-4 py-2.5 mb-4 shadow-lg">
			<h1 class="text-2xl font-bold sm:mb-0 mb-2">DUTh Weather Station</h1>
			<div class="flex flex-col sm:flex-row items-center sm:mb-0 mb-2">
				<div class="flex flex-row items-center sm:w-auto w-full flex-grow sm:mb-0">
					<div class="flex sm:flex-row flex-col items-center sm:w-auto w-full flex-grow sm:mb-0 mb-2">
						<label for="start-date" class="text-lg font-bold text-white mx-2">Start date</label>
						<input id="start-date" type="text" class="text-center mx-2 block w-32 px-2 py-1 mr-4 bg-white border border-gray-300 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-lg text-black" autocomplete="off"/>
					</div>
					<div class="flex sm:flex-row flex-col items-center sm:w-auto w-full flex-grow sm:mb-0 mb-2">
						<label for="end-date" class="text-lg font-bold text-white mx-2">End date</label>
						<input id="end-date" type="text" class="text-center mx-2 block w-32 px-2 py-1 mr-4 bg-white border border-gray-300 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-lg text-black" autocomplete="off"/>
					</div>
				</div>
				<div class="flex flex-row justify-center items-center sm:w-auto w-full mt-2 sm:mt-0 sm:mb-0">
					<button id="update-charts" class="text-lg mx-2 px-4 py-1.5 font-bold text-white bg-sky-800 rounded-md shadow hover:bg-sky-900 focus:outline-none focus:ring-2 focus:ring-sky-500">Update</button>
				</div>
			</div>
			<div id="last-timestamp" class="text-lg sm:pl-4">
				<span>Last updated at: </span><span id="timestamp-value"></span>
			</div>
		</nav>
		<div id="chart" class="grid grid-cols-1 md:grid-cols-2 gap-0 md:gap-8 justify-items-center">
			<div id="chart-temperature"></div>
			<div id="chart-humidity"></div>
			<div id="chart-pressure"></div>
			<div id="chart-airquality"></div>
		</div>
		<div class="py-2 text-center">
			<p class="text-gray-600">&copy; 2024 Peter Sideris and Fotis Mitsis</p>
			<p class="text-gray-600">This website is open <a href="https://github.com/petersid2022/duthweatherstation" class="text-blue-500 underline hover:text-blue-700" target="_blank" rel="noopener noreferrer">source</a></p>
		</div>
		<script>
      const margin = { top: 30, right: 40, bottom: 40, left: 60 };
      const width = 800 - margin.left - margin.right;
      const height = 450 - margin.top - margin.bottom;
      let allData = {};

      const createChart = (data, xField, yField, svgSelector, legendText) => {
        d3.select(svgSelector).select("svg").remove();
        const svg = d3.select(svgSelector).append("svg")
          .attr("width", "100%")
          .attr("height", height + margin.top + margin.bottom)
          .attr("viewBox", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)
          .attr("preserveAspectRatio", "xMidYMid meet")
          .append("g")
          .attr("transform", `translate(${margin.left},${margin.top})`);

        const parseTime = d3.isoParse;

        data.forEach(d => {
          d.timestamp = parseTime(d.timestamp);
          d[xField] = +d[xField];
        });

        const xExtent = d3.extent(data, d => d.timestamp);
        const x = d3.scaleTime()
          .domain(xExtent)
          .range([0, width]);

        let xAxisTicks = x.ticks(Math.max(width / 80, 2));
        const maxXValue = x.domain()[1];
        if (!xAxisTicks.includes(maxXValue)) {
          xAxisTicks = xAxisTicks.concat(maxXValue);
        }

        const yExtent = d3.extent(data, d => d[yField]);
        const yMargin = (yExtent[1] - yExtent[0]) * 0.05;
        const y = d3.scaleLinear()
          .domain([yExtent[0] - yMargin, yExtent[1] + yMargin]).nice()
          .range([height, 0]);

        let yAxisTicks = y.ticks(Math.max(height / 45, 2));
        const maxYValue = y.domain()[1];
        if (!yAxisTicks.includes(maxYValue)) {
          yAxisTicks = yAxisTicks.concat(maxYValue);
        }

        const xAxis = g => g
          .attr("class", "x-axis")
          .style("font-size", "14px")
          .attr("transform", `translate(0,${height})`)
          .call(d3.axisBottom(x).tickValues(xAxisTicks));

        const yAxis = g => g
          .attr("class", "y-axis")
          .style("font-size", "14px")
          .call(d3.axisLeft(y).tickValues(yAxisTicks));

        const clip = svg.append("defs").append("svg:clipPath")
          .attr("id", "clip")
          .append("svg:rect")
          .attr("width", width)
          .attr("height", height)
          .attr("x", 0)
          .attr("y", 0);

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on("end", updateChart);

        svg.append("g")
          .attr("class", "brush")
          .call(brush);

        svg.selectAll("line.horizontalGrid")
          .data(yAxisTicks)
          .enter()
          .append("line")
          .attr("class", "horizontalGrid")
          .attr("x1", 0)
          .attr("x2", width)
          .attr("y1", d => y(d))
          .attr("y2", d => y(d))
          .attr("fill", "none")
          .attr("shape-rendering", "crispEdges")
          .attr("stroke", "lightgray")
          .attr("stroke-width", "1px");

        svg.selectAll("line.verticalGrid")
          .data(xAxisTicks)
          .enter()
          .append("line")
          .attr("class", "verticalGrid")
          .attr("x1", d => x(d))
          .attr("x2", d => x(d))
          .attr("y1", 0)
          .attr("y2", height)
          .attr("fill", "none")
          .attr("shape-rendering", "crispEdges")
          .attr("stroke", "lightgray")
          .attr("stroke-width", "1px");

        const line = svg.append("path")
          .datum(data)
          .attr("class", "line")
          .attr("clip-path", "url(#clip)")
          .attr("fill", "none")
          .attr("stroke", "steelblue")
          .attr("stroke-width", 1.5)
          .attr("d", d3.line()
            .curve(d3.curveBasis)
            .x(d => x(d.timestamp))
            .y(d => y(d[yField])));

        let idleTimeout;
        function idled() { idleTimeout = null; }

        function updateChart(event) {
          const extent = event.selection;
          if (!extent) {
            if (!idleTimeout) return idleTimeout = setTimeout(idled, 350);
            x.domain(d3.extent(data, d => d.timestamp));
          } else {
            x.domain([x.invert(extent[0]), x.invert(extent[1])]);
            svg.select(".brush").call(brush.move, null);
          }

          svg.select(".x-axis").transition().duration(1000).call(d3.axisBottom(x));
          line
            .datum(data)
            .transition()
            .duration(1000)
            .attr("d", d3.line()
            .curve(d3.curveBasis)
            .x(d => x(d.timestamp))
            .y(d => y(d[yField])));
        }

        svg.on("dblclick", function() {
          x.domain(d3.extent(data, d => d.timestamp));
          svg.select(".x-axis").transition().call(d3.axisBottom(x));
          line
            .datum(data)
            .transition()
            .attr("d", d3.line()
            .curve(d3.curveBasis)
            .x(d => x(d.timestamp))
            .y(d => y(d[yField])));
        });

        svg.append("g")
          .call(xAxis);

        svg.append("g")
          .call(yAxis);

        const lastValue = data[0][yField];

        const legend = svg.append("g")
          .attr("class", "legend")
          .attr("transform", `translate(${width / 2},${margin.top})`);

        legend.append("rect")
          .attr("x", -70)
          .attr("y", -52)
          .attr("width", 14)
          .attr("height", 14)
          .attr("fill", "steelblue")
          .attr("stroke", "steelblue");

        legend.append("text")
          .attr("x", -50)
          .attr("y", -45)
          .attr("dy", ".35em")
          .style("text-anchor", "start")
          .style("font-size", "18px")
          .text(`${legendText}: ${lastValue}`);
      };

      const fetchData = (url) => {
        return fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        }).then(response => response.json());
      };

      const filterDataByDate = (data, startDate, endDate) => {
        const parseTime = d3.isoParse;
        return data.filter(d => {
          const date = parseTime(d.timestamp);
          return date >= startDate && date <= endDate;
        });
      };

      const initializeDatePickers = (data) => {
        const parseTime = d3.isoParse;
        const dateExtent = d3.extent(data, d => parseTime(d.timestamp));
        
        const startDatePicker = flatpickr("#start-date", {
          defaultDate: dateExtent[0],
          minDate: dateExtent[0],
          maxDate: dateExtent[1],
          disableMobile: "true",
        });
        
        const endDatePicker = flatpickr("#end-date", {
          defaultDate: dateExtent[1],
          minDate: dateExtent[0],
          maxDate: dateExtent[1],
          disableMobile: "true",
        });

        document.getElementById("start-date").classList.remove("hidden");
        document.getElementById("end-date").classList.remove("hidden");
      };

      const updateCharts = () => {
        const startDate = new Date(document.getElementById('start-date').value);
        const endDate = new Date(document.getElementById('end-date').value);

        if (startDate > endDate) {
          console.error("Start date cannot be after end date");
          return;
        }

        const temperatureData = filterDataByDate(allData.temperature, startDate, endDate);
        const humidityData = filterDataByDate(allData.humidity, startDate, endDate);
        const pressureData = filterDataByDate(allData.pressure, startDate, endDate);
        const airQualityData = filterDataByDate(allData.airQuality, startDate, endDate);

        if (
            temperatureData.length === 0 ||
            humidityData.length === 0 ||
            pressureData.length === 0 ||
            airQualityData.length === 0
           ) {
          console.error("No data available within the selected date range");
          return;
        }

        createChart(temperatureData, 'timestamp', 'temperature', '#chart-temperature', 'Temperature');
        createChart(humidityData, 'timestamp', 'humidity', '#chart-humidity', 'Humidity');
        createChart(pressureData, 'timestamp', 'pressure', '#chart-pressure', 'Pressure');
        createChart(airQualityData, 'timestamp', 'gas_level', '#chart-airquality', 'Air Quality');
      };

      document.getElementById('update-charts').addEventListener('click', updateCharts);

      Promise.all([
        fetchData('/api/data?sensor=dht11'),
        fetchData('/api/data?sensor=bmp180'),
        fetchData('/api/data?sensor=mq135')
      ]).then(([dht11Data, bmp180Data, mq135Data]) => {
        allData.temperature = dht11Data;
        allData.humidity = dht11Data;
        allData.pressure = bmp180Data;
        allData.airQuality = mq135Data;
            
        initializeDatePickers(dht11Data.concat(bmp180Data, mq135Data));
        updateCharts();
            
        const lastTimestamp = dht11Data[0].timestamp;
        document.getElementById('timestamp-value').textContent = new Date(lastTimestamp).toLocaleString();
      }).catch(error => {
        console.error('Error fetching chart data:', error);
      });
    </script>
	}
}
