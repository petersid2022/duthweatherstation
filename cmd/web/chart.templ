package web

templ Chart() {
	@Base() {
		<div id="chart" class="grid grid-cols-1 md:grid-cols-2 gap-1 justify-items-center">
			<div id="chart-temperature" class="w-full"></div>
			<div id="chart-humidity" class="w-full"></div>
			<div id="chart-pressure" class="w-full"></div>
			<div id="chart-airquality" class="w-full"></div>
		</div>
		<div id="last-timestamp-container" class="flex justify-between items-center w-full">
			<div class="ml-4">
				<p>&copy; 2024 Peter Sideris and Fotis Mitsis</p>
			</div>
			<div id="last-timestamp" class="mr-4">
				<span>Last updated at: </span><span id="timestamp-value"></span>
			</div>
		</div>
		<script>
            const margin = { top: 20, right: 40, bottom: 40, left: 40 };
            const width = 750 - margin.left - margin.right;
            const height = 450 - margin.top - margin.bottom;

            const createChart = (data, xField, yField, svgSelector, legendText) => {
                const svg = d3.select(svgSelector).append("svg")
                    .attr("width", "100%")
                    .attr("height", height + margin.top + margin.bottom)
                    .attr("viewBox", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)
                    .attr("preserveAspectRatio", "xMidYMid meet")
                    .append("g")
                    .attr("transform", `translate(${margin.left},${margin.top})`);

                const parseTime = d3.isoParse;

                data.forEach(d => {
                    d.timestamp = parseTime(d.timestamp);
                    d[xField] = +d[xField];
                });

                const x = d3.scaleTime()
                    .domain(d3.extent(data, d => d.timestamp))
                    .range([0, width]);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[yField])]).nice()
                    .range([height, 0]);

                const xAxis = g => g
                    .attr("transform", `translate(0,${height})`)
                    .call(d3.axisBottom(x).ticks(Math.max(width / 80, 2)));

                const yAxis = g => g
                    .call(d3.axisLeft(y));

                svg.append("path")
                    .datum(data)
                    .attr("fill", "none")
                    .attr("stroke", "steelblue")
                    .attr("stroke-width", 1.5)
                    .attr("d", d3.line()
                        .x(d => x(d.timestamp))
                        .y(d => y(d[yField]))
                    );

                svg.append("g")
                    .call(xAxis);

                svg.append("g")
                    .call(yAxis);

                // Add legend
                svg.append("g")
                    .attr("class", "legend")
                    .attr("transform", `translate(${width - 50},${margin.top})`)
                    .append("text")
                    .attr("x", -20)
                    .attr("y", -20)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start")
                    .text(legendText);

                svg.select(".legend")
                    .append("rect")
                    .attr("x", -40)
                    .attr("y", -25)
                    .attr("width", 12)
                    .attr("height", 12)
                    .attr("fill", "steelblue")
                    .attr("stroke", "steelblue");
            };

            const fetchAndCreateChart = (url, xField, yField, svgSelector, legendText) => {
                fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    createChart(data, xField, yField, svgSelector, legendText);
                    const lastTimestamp = data[0].timestamp;
                    document.getElementById('timestamp-value').textContent = new Date(lastTimestamp).toLocaleString();
                })
                .catch(error => {
                    document.querySelector(svgSelector).innerHTML = "Error loading chart.";
                    console.error('Error fetching chart data:', error);
                });
            };

            fetchAndCreateChart('/api/data?sensor=dht11', 'timestamp', 'temperature', '#chart-temperature', 'Temperature');
            fetchAndCreateChart('/api/data?sensor=dht11', 'timestamp', 'humidity', '#chart-humidity', 'Humidity');
            fetchAndCreateChart('/api/data?sensor=bmp180', 'timestamp', 'pressure', '#chart-pressure', 'Pressure');
            fetchAndCreateChart('/api/data?sensor=mq135', 'timestamp', 'gas_level', '#chart-airquality', 'Air Quality');
        </script>
	}
}
